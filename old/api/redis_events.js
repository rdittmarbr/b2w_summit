// Generated by CoffeeScript 1.6.3
(function() {
  var Application, RedisEvents, makeSearchRegexp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    return Application.bindTooltips();
  });

  window.Application = Application = (function() {
    function Application() {}

    Application.bindTooltips = function() {
      var defaultOptions;
      defaultOptions = {
        container: 'body',
        placement: 'top',
        template: '<div class="tooltip results-tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
      };
      return $('.tooltipped').tooltip(defaultOptions);
    };

    return Application;

  })();

  $(function() {
    var redisEvents;
    redisEvents = new RedisEvents();
    redisEvents.bind();
    return $(".events-template").on("click", function(e) {
      var _this = this;
      redisEvents.selectTemplate($(".event-json", $(this)).text());
      $(this).addClass("updated");
      clearTimeout(this.selectTemplateTimeout);
      return this.selectTemplateTimeout = setTimeout(function() {
        return $(_this).removeClass("updated");
      }, 300);
    });
  });

  window.RedisEvents = RedisEvents = (function() {
    function RedisEvents() {
      this.onMessageError = __bind(this.onMessageError, this);
      this.onMessageReceived = __bind(this.onMessageReceived, this);
      this.serverUrl = this.getServerUrlFromInput();
      this.pushPath = '/push';
      this.pullPath = '/pull';
      this.publishChannel = null;
      this.source = null;
      this.lastContentSent = null;
      this.searchTimeout = null;
    }

    RedisEvents.prototype.bind = function() {
      var _this = this;
      this.bindSearch();
      $("[data-events-out-submit]").on("click", function(e) {
        var channel, content;
        content = $("[data-events-out-content]").val();
        content = JSON.parse(content);
        channel = $("[data-events-out-channel]").val().trim();
        if ((channel == null) || channel === "") {
          channel = 'to-bbb-apps';
        }
        _this.lastContentSent = content;
        return _this.sendEvent({
          channel: channel,
          data: content
        });
      });
      $("[data-events-server-connect]").on("click", function(e) {
        var url;
        url = _this.getServerUrlFromInput();
        return _this.connect(url);
      });
      return $("[data-events-out-pretty]").on("click", function(e) {
        return _this.selectTemplate($("[data-events-out-content]").val());
      });
    };

    RedisEvents.prototype.bindSearch = function() {
      var timeout;
      timeout = this.searchTimeout;
      return $(document).on('keyup', '[data-events-search-input]', function(e) {
        var $searchInput, search;
        $searchInput = $(this);
        search = function() {
          var searchTerm, showOrHide;
          searchTerm = $searchInput.val();
          showOrHide = function() {
            var $elem, eventText, searchRe, visible;
            $elem = $(this);
            if ((searchTerm != null) && !_.isEmpty(searchTerm.trim())) {
              visible = false;
              searchRe = makeSearchRegexp(searchTerm);
              eventText = $("[data-events-template-content]", $elem).text();
              if (eventText.match(searchRe)) {
                visible = true;
              }
            } else {
              visible = true;
            }
            if (visible) {
              $elem.show();
            } else {
              $elem.hide();
            }
            return true;
          };
          return $('[data-events-template]').each(showOrHide);
        };
        clearTimeout(timeout);
        return timeout = setTimeout(function() {
          return search();
        }, 200);
      });
    };

    RedisEvents.prototype.getServerUrlFromInput = function() {
      return $("[data-events-server='url']").val();
    };

    RedisEvents.prototype.onMessageReceived = function(e) {
      var $icon, $message, data, pretty;
      console.log(e);
      this.setConnected(true);
      data = JSON.parse(e.data);
      if ($("[data-events-out-pretty]").is(":checked")) {
        pretty = JSON.stringify(data, null, 4);
      } else {
        pretty = JSON.stringify(data, null, 0);
      }
      if (this.excludeEvent(pretty)) {
        return;
      }
      if (JSON.stringify(data) === JSON.stringify(this.lastContentSent)) {
        this.lastContentSent = null;
        $message = $('<pre class="events-result sent">').html(pretty);
        $icon = $('<span class="glyphicon glyphicon-arrow-up tooltipped" title="sent by you">');
        $message.prepend($icon);
      } else {
        $message = $('<pre class="events-result received">').html(pretty);
      }
      $('#events-results').prepend($message);
      return Application.bindTooltips();
    };

    RedisEvents.prototype.onMessageError = function(e) {
      console.log("EventSource failed");
      return this.setConnected(false);
    };

    RedisEvents.prototype.excludeEvent = function(str) {
      var pattern, patterns, _i, _len, _ref;
      patterns = $("[data-events-config='exclude']").val();
      _ref = patterns.split('\n');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pattern = _ref[_i];
        if ((str != null) && (pattern != null) && pattern.trim() !== '' && str.match(pattern)) {
          return true;
        }
      }
      return false;
    };

    RedisEvents.prototype.connect = function(url) {
      try {
        this.serverUrl = url;
        this.setConnected(true);
        if (this.source != null) {
          this.source.close();
        }
        this.source = new EventSource("" + this.serverUrl + this.pullPath, {
          withCredentials: false
        });
        this.source.onerror = this.onMessageError;
        return this.source.onmessage = this.onMessageReceived;
      } catch (_error) {
        return this.setConnected(false);
      }
    };

    RedisEvents.prototype.setConnected = function(connected) {
      if (connected) {
        $("#menu-server").removeClass("disconnected");
        return $("#menu-server").addClass("connected");
      } else {
        $("#menu-server").removeClass("connected");
        return $("#menu-server").addClass("disconnected");
      }
    };

    RedisEvents.prototype.sendEvent = function(content) {
      var url;
      url = "" + this.serverUrl + this.pushPath;
      console.log("Sending the event", content, "to", url);
      return $.ajax({
        url: url,
        type: 'POST',
        cache: false,
        data: JSON.stringify(content),
        crossdomain: true,
        contentType: 'application/json',
        success: function(data) {
          return console.log('Sent the event successfully');
        },
        error: function(jqXHR, textStatus, err) {
          return console.log('Error sending the event:', textStatus, ', err', err);
        }
      });
    };

    RedisEvents.prototype.selectTemplate = function(text) {
      var content,
        _this = this;
      content = text;
      if ($("[data-events-out-pretty]").is(":checked")) {
        content = JSON.stringify(JSON.parse(content), null, 4);
      } else {
        content = JSON.stringify(JSON.parse(content), null, 0);
      }
      $("[data-events-out-content]").val(content);
      $('[data-events-out-content]').addClass("updated");
      clearTimeout(this.selectTemplateTimeout2);
      return this.selectTemplateTimeout2 = setTimeout(function() {
        return $('[data-events-out-content]').removeClass("updated");
      }, 300);
    };

    return RedisEvents;

  })();

  makeSearchRegexp = function(term) {
    var terms;
    terms = term.split(" ");
    terms = _.filter(terms, function(t) {
      return !_.isEmpty(t.trim());
    });
    terms = _.map(terms, function(t) {
      return ".*" + t + ".*";
    });
    terms = terms.join('|');
    return new RegExp(terms, "i");
  };

}).call(this);
